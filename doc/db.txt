setup.php defines the $dbdir, which is the base of the database in the
file system. Here's how the bank directory is structured.

Items in angle brackets are variables
Items not in angle brackets are literals
"--" comment to the end of the line
<dir>/ is a directory
<key>=<value> is a file named <key> with contents <value>
Items whose names end with "#" are sequence numbers.
name:<item> denotes an optional item, passed by position or name
Items in parens are signed. Signature omitted here.

$dbdir/
  sequence: <sequence#>  -- The transaction sequence number
  privkey: <privkey>   -- the private key. Maybe this shouldn't be in
                       -- the database, so it doesn't get backed up.
  privkeyid: <bankid>  -- The id of the private key
  regfee: <regfee>  -- Usage tokens paid for registration
                    -- default: 10 (2 each for /pubkey & /pubkeysig,
                    --              <id>, last, balance, outbox, inbox,
                    --              and one bonus token)
  )
  regfeesig: (<bankid>,regfee,<fee#>,0,<amount>)
  tranfee: <tranfee>  -- Usage tokens paid for a transaction.
                      -- Returned when the transaction completes.
                      -- Default: 2 (inbox & outbox entry)
  tranfeesig: (<bankid>,tranfee,<fee#>,0,<amount>)
  fee/  -- permanent fees, paid for transactions of the given type
        -- Default: none
    spend: <asset#>:<amount>[.<asset#>:<amount>...]
    note: <asset#>:<amount>[.<asset#>:<amount>...]
  feesig/
    spend=(<bankid>,fee|spend,<fee#>,<asset#>,<amount>)[...]
    note=(<bankid>,fee|note,<fee#>,<asset#>,<amount>)[...]
  pubkey/
    <id>=<pubkey>
  pubkeysig/
    <id>=(<bankid>,pubkey,<pubkey>,name>)
  asset/ -- <asset#> 0 is "usage tokens"
    last=<asset#>  -- new <asset#> must be greater than this
    <asset#>: (<id>,asset,<asset#>,<name>)
  assetname/
    <name>=<asset#>
  account/
    <id>/
      last: <sequence#>  -- new transactions must have higher sequence
      balance/
        <name>/  -- "main" is the default balance name
          <asset#>=(<id>,balance,<tran#>,<asset#>,<amount>,name=<name>)
      outbox/
        <tran#>=(<id>,spend,<tran#>,<id2>,<asset#>,<amount>,note:<note>,from:<name>)
        <re#>=(<id>,note,<re#>,<id2>,re:<re2#>,note:<note>)
      outboxhash=(<id>,outboxhash,<tran#>,<hash>)
      inbox/
        <tran#>=(<id2>,spend|accept,<tran2#>,note:<note2>,to:<name2>)
        <tran#>=(<id3>,spend|reject,<tran3#>,note:<note3>)
        <re2#>=(<id4>,note,<re2#>,<id>,<re#>,note:<note4>)


=== Transactions ===


Create account
--------------

  Customer sends:

(<id>,id,<id>,<pubkey>)

  If the id is new, matches the pubkey, the signature is OK, and the
  customer has enough usage tokens in his inbox (spending usage tokens
  to a new <id> is how the account directory is actually created),
  bank responds with:

(<id>,id,<pubkey>)

  Customer will need to do process his inbox to transfer his
  introduction tokens to his balance. No spend|cancel operations will
  be allowed for usage token spends to an account with a negative
  usage token balance. This ensures that the usage token balance will
  be positive after the new customer processes his inbox.

  Otherwise, bank puts a negative balance (/regee) of usage tokens in
  the balance, and responds with:

(<bankid>,id,<pubkey>)


Look up pubkey
--------------

  Customer sends:

(<id>,id,<id2>)

  If there is such an id registered, bank responds with:

(<id>,id,<pubkey>)

  If there is no such id, bank responds with:

(<bankid>,id,<pubkey>)

  Hence, to look up the bank id and public key, send (<id>,id,0)


Get sequence number
-------------------

  Customer sends:

(<id>,sequence,<random>)

  Bank increments /sequence, then returns:

(<bankid>,sequence,<sequence#>)


Get fees
--------

  Customer sends:

(<id>,getfees,<operation>,<random>)

  Bank sends back /regfeesig, /tranfeesig, and /feesig/<operation>:

(<bankid>regfee,0,<fee#>,<amount>).
  (<bankid>,tranfee,<fee#>,0,<amount>).
  (<bankid>,fee|<operation>,<fee#>,<asset#>,<amount>).
  (<bankid>,fee|<operation2>,<fee2#>,<asset2#>,<amount2>).
  ...
  (<bankid>,fee|<operationN>,<feeN#>,<assetN#>,<amountN>)

Spend
-----

  Customer sends the following. Second and subsequent balance items
  are for the fee assets. Fees always come from the same account
  <name> as the spend. This allows limitations on licensed spends (not
  defined yet) from a particular account <name>. Or maybe we should
  have a particular account name, assigned by the user, defaulting to
  "main" for all fees.

(<id>,spend,<tran#>,<id2>,<asset#>,<amount>,note:<note>,from:<name>).
  (<id>,balance,<tran#>,<asset#>,<amount>,name=<name>).
  (<id>,balance,<tran#>,<asset2#>,<amount2>,name=<name>).
  ...
  (<id>,balance,<tran#>,<assetN#>,<amountN>,name=<name>).
  (<id>,outboxhash,<tran#>,<hash>)

  Bank checks that the <tran#> is greater than /account/<id>/last,
  that the balance (after subtracting the spend amount) and hash of
  list of outbox transaction numbers (including the new spend
  transaction number) match what the user sent. If they match, bank
  updtes /account/<id>/last to <tran#>, adds the spend to
  /account/<id>/outbox/, sets /account/<id>/balance/<name>/<asset#> to
  the user's balance item, updates /account/<id>/outboxhash with the
  customer's outboxhash item, and sends:

(<bankid>,balance,<tran#>,<asset#>,<amount>,name=<name>).
  (<bankid>,balance,<tran#>,<asset2#>,<amount2>,name=<name>).
  ...
  (<bankid>,balance,<tran#>,<assetN#>,<amountN>,name=<name>).
  (<bankid>,outboxhash,<tran#>,<asset#>,<amount>)

If they don't match, bank sends:

(<bankid>,spend|reject,<tran#>).
  (<id>,balance,<tran#>,<asset#>,<amount>,name=<name>).
  (<id>,outboxhash,<tran#>,<hash>)


Process Inbox
-------------

  Customer sends:

(<id>,inbox,<random>)

  Bank responds with contents of /account/<id>/inbox/, separated by
  periods:

(<id2>,spend|accept,<tran2#>,note:<note2>,to:<name2>).
  (<id3>,spend|reject,<tran3#>,note:<note3>).
  (<id4>,note,<tran4#>,<id>,<re#>,note:<note4>)

  Customer sends:

(<id>,removeinbox,<tran2#>|<tran3#>|<tran4#>).
  (<id>,balance,<tran4#>,<asset#>,<amount>,name=<name>).
  (<id>,balance,<tran4#>,<asset2#>,<amount2>,name=<name2>).
  ...
  (<id>,balance,<tran4#>,<assetN#>,<amount3>,name=<nameN>).
  (<id>,outboxhash,<tran#>,<hash>)

Bank compares all balances and the outboxhash. If correct, bank
removes the listed transactions from /account/<id>/inbox/,
corresponding transactions from /account/<id>/outbox/, updates
the /account/<id>/balance/<nameN>/<assetN#> with the balances the
customer sent, updates /account/<id>/outboxhash with the outboxhash
item the customer sent, and sends back:

(<bankid>,balance,<tran4#>,<asset#>,<amount>,name=<name>).
  (<bankid>,balance,<tran4#>,<asset2#>,<amount2>,name=<name2>).
  ...
  (<bankid>,balance,<tran4#>,<assetN#>,<amount3>,name=<nameN>).
  (<bankid>,outboxhash,<tran#>,<hash>)
